//Header File: linkedStack.h 
//all headder files and libraries that needs to be included
#ifndef H_StackType
#define H_StackType
#include <iostream>
#include <cassert> 
#include "stackADT.h"

using namespace std;

//Definition of the node 
template <class Type>
struct nodeType{//class nodeType includes its link and data
    Type info;
    nodeType<Type> *link;
};

template <class Type>//all headers for the functions in the class
class linkedStackType: public stackADT<Type>
{
public:
    const linkedStackType<Type>& operator=
                              (const linkedStackType<Type>&);
      //Overload the assignment operator.
	  //this will make the assignment operator behave the way this class wants

    bool isEmptyStack() const;
      //Function to determine whether the stack is empty.
      //Postcondition: Returns true if the stack is empty;
      //               otherwise returns false.
	  //you need to check if the stack is empty before pop(deleting of the element) in the stack
	  
    bool isFullStack() const;
      //Function to determine whether the stack is full.
      //Postcondition: Returns false.
	  //you need to check if the stack is full in order to avoid push(adding of the element) in the stack

    void initializeStack();
      //Function to initialize the stack to an empty state. 
      //Postcondition: The stack elements are removed; 
      //               stackTop = nullptr;
	 
    void push(const Type& newItem);
      //Function to add newItem to the stack.
      //Precondition: The stack exists and is not full.
      //Postcondition: The stack is changed and newItem 
      //               is added to the top of the stack.

    Type top() const;
      //Function to return the top element of the stack.
      //Precondition: The stack exists and is not empty.
      //Postcondition: If the stack is empty, the program 
      //               terminates; otherwise, the top 
      //               element of the stack is returned.
	  //it is important to identify the top element because it is where you add or delete the element
	  //it also is most recent data in the stack
	  
    void pop();
      //Function to remove the top element of the stack.
      //Precondition: The stack exists and is not empty.
      //Postcondition: The stack is changed and the top 
      //               element is removed from the stack.

    linkedStackType(); 
      //Default constructor
      //Postcondition: stackTop = nullptr;
	  //the constructor without parameter passed in, will initialize the variable

    linkedStackType(const linkedStackType<Type>& otherStack); 
      //Copy constructor
	  //constructor that copies when the object is created with above parameter type

    ~linkedStackType();
      //Destructor
      //Postcondition: All the elements of the stack are 
      //               removed from the stack.

private:
    nodeType<Type> *stackTop; //pointer to the stack

    void copyStack(const linkedStackType<Type>& otherStack); 
      //Function to make a copy of otherStack.
      //Postcondition: A copy of otherStack is created and
      //               assigned to this stack.
};


    //Default constructor
template <class Type> 
linkedStackType<Type>::linkedStackType()
{
    stackTop = nullptr;
}//constructor without passed in parameter, initializes the variable

template <class Type>// function that tests if the stack is empty
bool linkedStackType<Type>::isEmptyStack() const
{
    return(stackTop == nullptr);
} //end isEmptyStack


template <class Type>// function that tests if the stack is full with no spots left
bool linkedStackType<Type>:: isFullStack() const// it is never full in linked list as it doesn't have max size set for the stack
{
    return false;
} //end isFullStack

template <class Type>
void linkedStackType<Type>:: initializeStack()
{
    nodeType<Type> *temp; //pointer to delete the node

    while (stackTop != nullptr)  //while there are elements in 
                              //the stack
    {
        temp = stackTop;    //set temp to point to the 
                            //current node
        stackTop = stackTop->link;  //advance stackTop to the
                                    //next node
        delete temp;    //deallocate memory occupied by temp
    }
} //end initializeStack


template <class Type>
void linkedStackType<Type>::push(const Type& newElement)
{
    nodeType<Type> *newNode;  //pointer to create the new node

    newNode = new nodeType<Type>; //create the node

    newNode->info = newElement; //store newElement in the node
    newNode->link = stackTop; //insert newNode before stackTop
    stackTop = newNode;       //set stackTop to point to the 
                              //top node
} //end push


template <class Type>
Type linkedStackType<Type>::top() const
{
    assert(stackTop != nullptr); //if stack is empty,
                              //terminate the program
    return stackTop->info;    //return the top element 
}//end top

template <class Type>
void linkedStackType<Type>::pop()
{
    nodeType<Type> *temp;   //pointer to deallocate memory

    if (stackTop != nullptr)
    {
        temp = stackTop;  //set temp to point to the top node

        stackTop = stackTop->link;  //advance stackTop to the 
                                    //next node
        delete temp;    //delete the top node
    }
    else
        cout << "Cannot remove from an empty stack." << endl;
}//end pop

template <class Type> 
void linkedStackType<Type>::copyStack
                     (const linkedStackType<Type>& otherStack)
{
    nodeType<Type> *newNode, *current, *last;

    if (stackTop != nullptr) //if stack is nonempty, make it empty
        initializeStack();// this function will initialize it to empty state

    if (otherStack.stackTop == nullptr)//if passed in stack's stackTop is empty
        stackTop = nullptr;// make current stackTop empty
    else//in other cases
    {//copy the value of passed in other stack's values to the current stack
        current = otherStack.stackTop;  //set current to point
                                   //to the stack to be copied

            //copy the stackTop element of the stack 
        stackTop = new nodeType<Type>;  //create the node

        stackTop->info = current->info; //copy the info
        stackTop->link = nullptr;  //set the link field of the
                                //node to nullptr
        last = stackTop;        //set last to point to the node
        current = current->link;    //set current to point to
                                    //the next node

            //copy the remaining stack
        while (current != nullptr)//until current stack is not empty
        {
            newNode = new nodeType<Type>;//create a new node

            newNode->info = current->info;//assign current data to new node 
            newNode->link = nullptr;//point new node's link to null, to the last spot
            last->link = newNode;// last is now linked to newNode
            last = newNode;//last is now newNode
            current = current->link;//move to next spot
        }//end while
    }//end else
} //end copyStack

    //copy constructor
template <class Type>   
linkedStackType<Type>::linkedStackType(//copy the values of passed in stack to current stack
                      const linkedStackType<Type>& otherStack)
{
    stackTop = nullptr;//make stackTop empty
    copyStack(otherStack);//copy the value of passed in otherStack's values to current stack
}//end copy constructor

    //destructor
template <class Type> //free the memory
linkedStackType<Type>::~linkedStackType()
{
    initializeStack();
}//end destructor

    //overloading the assignment operator
template <class Type>  //copy passed in stack's values (on the right) to current stack 
const linkedStackType<Type>& linkedStackType<Type>::operator=
    			  (const linkedStackType<Type>& otherStack)
{ 
    if (this != &otherStack) //avoid self-copy
        copyStack(otherStack);//copies passed in otherStack's value and assigns it to current stack

    return *this; 
}//end operator=

#endif